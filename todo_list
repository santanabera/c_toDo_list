#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TASKS 100
#define TASK_FILE "tasks.txt"

typedef struct {
    char task[100];
    int completed;
} Task;

Task tasks[MAX_TASKS];
int task_count = 0;

// Function to load tasks from file
void loadTasks() {
    FILE *file = fopen(TASK_FILE, "r");
    if (file == NULL) return;

    task_count = 0;
    while (fscanf(file, "%99[^\n] %d\n", tasks[task_count].task, &tasks[task_count].completed) != EOF) {
        task_count++;
    }
    fclose(file);
}

// Function to save tasks to file
void saveTasks() {
    FILE *file = fopen(TASK_FILE, "w");
    if (file == NULL) {
        printf("Error saving tasks!\n");
        return;
    }

    for (int i = 0; i < task_count; i++) {
        fprintf(file, "%s %d\n", tasks[i].task, tasks[i].completed);
    }
    fclose(file);
}

// Function to add a task
void addTask() {
    if (task_count >= MAX_TASKS) {
        printf("Task list is full!\n");
        return;
    }

    printf("Enter task: ");
    getchar(); // To clear newline from input buffer
    fgets(tasks[task_count].task, 100, stdin);
    tasks[task_count].task[strcspn(tasks[task_count].task, "\n")] = '\0'; // Remove newline
    tasks[task_count].completed = 0;
    task_count++;

    saveTasks();
    printf("Task added successfully!\n");
}

// Function to display tasks
void viewTasks() {
    if (task_count == 0) {
        printf("No tasks found!\n");
        return;
    }

    printf("\nTo-Do List:\n");
    for (int i = 0; i < task_count; i++) {
        printf("%d. [%c] %s\n", i + 1, tasks[i].completed ? 'X' : ' ', tasks[i].task);
    }
}

// Function to mark task as completed
void markTaskComplete() {
    viewTasks();
    printf("\nEnter task number to mark as completed: ");
    int num;
    scanf("%d", &num);

    if (num < 1 || num > task_count) {
        printf("Invalid task number!\n");
        return;
    }

    tasks[num - 1].completed = 1;
    saveTasks();
    printf("Task marked as completed!\n");
}

// Function to delete a task
void deleteTask() {
    viewTasks();
    printf("\nEnter task number to delete: ");
    int num;
    scanf("%d", &num);

    if (num < 1 || num > task_count) {
        printf("Invalid task number!\n");
        return;
    }

    for (int i = num - 1; i < task_count - 1; i++) {
        tasks[i] = tasks[i + 1];
    }
    task_count--;

    saveTasks();
    printf("Task deleted successfully!\n");
}

// Main menu
void menu() {
    int choice;
    while (1) {
        printf("\nTo-Do List Manager\n");
        printf("1. Add Task\n");
        printf("2. View Tasks\n");
        printf("3. Mark Task Complete\n");
        printf("4. Delete Task\n");
        printf("5. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: addTask(); break;
            case 2: viewTasks(); break;
            case 3: markTaskComplete(); break;
            case 4: deleteTask(); break;
            case 5: saveTasks(); exit(0);
            default: printf("Invalid choice!\n");
        }
    }
}

int main() {
    loadTasks();
    menu();
    return 0;
}
